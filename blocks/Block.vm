function Block.new 0
push constant 7
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 2
pop this 1
push argument 1
pop this 2
push argument 3
pop this 3
push constant 0
pop this 5
push constant 0
pop this 6
push pointer 0
call Block.draw 1
pop temp 0
push pointer 0
return
function Block.draw 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push constant 1
sub
push this 2
push constant 1
sub
push this 1
push constant 1
add
push this 3
push constant 1
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 0
push this 2
push this 1
push this 3
call Screen.drawRectangle 4
pop temp 0
push pointer 0
push this 1
push this 3
push constant 3
push constant 3
push constant 0
call Block.drawQuarterCircle 6
pop temp 0
push pointer 0
push this 0
push this 3
push constant 3
push constant 4
push constant 0
call Block.drawQuarterCircle 6
pop temp 0
push pointer 0
push this 0
push this 2
push constant 3
push constant 1
push constant 0
call Block.drawQuarterCircle 6
pop temp 0
push pointer 0
push this 1
push this 2
push constant 3
push constant 2
push constant 0
call Block.drawQuarterCircle 6
pop temp 0
push this 0
push this 1
add
push constant 2
call Math.divide 2
push this 2
push this 3
add
push constant 2
call Math.divide 2
push constant 1
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function Block.drawQuarterCircle 5
push argument 0
pop pointer 0
push argument 1
pop local 1
push argument 2
pop local 2
push argument 4
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
label WHILE_EXP0
push argument 1
push local 1
push argument 3
add
lt
not
if-goto WHILE_END0
push local 2
pop argument 2
label WHILE_EXP1
push argument 2
push local 2
push argument 3
add
lt
not
if-goto WHILE_END1
push argument 1
push local 1
sub
push argument 1
push local 1
sub
call Math.multiply 2
pop local 3
push local 2
push argument 2
sub
push local 2
push argument 2
sub
call Math.multiply 2
pop local 4
push argument 5
call Screen.setColor 1
pop temp 0
push local 3
push local 4
add
push argument 3
push argument 3
call Math.multiply 2
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
push argument 2
call Screen.drawPixel 2
pop temp 0
label IF_FALSE1
push argument 2
push constant 1
add
pop argument 2
goto WHILE_EXP1
label WHILE_END1
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
label IF_FALSE0
push argument 4
push constant 2
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
label WHILE_EXP2
push argument 1
push local 1
push argument 3
sub
gt
not
if-goto WHILE_END2
push local 2
pop argument 2
label WHILE_EXP3
push argument 2
push local 2
push argument 3
add
lt
not
if-goto WHILE_END3
push argument 1
push local 1
sub
push argument 1
push local 1
sub
call Math.multiply 2
pop local 3
push local 2
push argument 2
sub
push local 2
push argument 2
sub
call Math.multiply 2
pop local 4
push argument 5
call Screen.setColor 1
pop temp 0
push local 3
push local 4
add
push argument 3
push argument 3
call Math.multiply 2
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 1
push argument 2
call Screen.drawPixel 2
pop temp 0
label IF_FALSE3
push argument 2
push constant 1
add
pop argument 2
goto WHILE_EXP3
label WHILE_END3
push argument 1
push constant 1
sub
pop argument 1
goto WHILE_EXP2
label WHILE_END2
label IF_FALSE2
push argument 4
push constant 3
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
label WHILE_EXP4
push argument 1
push local 1
push argument 3
sub
gt
not
if-goto WHILE_END4
push local 2
pop argument 2
label WHILE_EXP5
push argument 2
push local 2
push argument 3
sub
gt
not
if-goto WHILE_END5
push argument 1
push local 1
sub
push argument 1
push local 1
sub
call Math.multiply 2
pop local 3
push local 2
push argument 2
sub
push local 2
push argument 2
sub
call Math.multiply 2
pop local 4
push argument 5
call Screen.setColor 1
pop temp 0
push local 3
push local 4
add
push argument 3
push argument 3
call Math.multiply 2
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push argument 1
push argument 2
call Screen.drawPixel 2
pop temp 0
label IF_FALSE5
push argument 2
push constant 1
sub
pop argument 2
goto WHILE_EXP5
label WHILE_END5
push argument 1
push constant 1
sub
pop argument 1
goto WHILE_EXP4
label WHILE_END4
label IF_FALSE4
push argument 4
push constant 4
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
label WHILE_EXP6
push argument 1
push local 1
push argument 3
add
lt
not
if-goto WHILE_END6
push local 2
pop argument 2
label WHILE_EXP7
push argument 2
push local 2
push argument 3
sub
gt
not
if-goto WHILE_END7
push argument 1
push local 1
sub
push argument 1
push local 1
sub
call Math.multiply 2
pop local 3
push local 2
push argument 2
sub
push local 2
push argument 2
sub
call Math.multiply 2
pop local 4
push argument 5
call Screen.setColor 1
pop temp 0
push local 3
push local 4
add
push argument 3
push argument 3
call Math.multiply 2
lt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push argument 1
push argument 2
call Screen.drawPixel 2
pop temp 0
label IF_FALSE7
push argument 2
push constant 1
sub
pop argument 2
goto WHILE_EXP7
label WHILE_END7
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP6
label WHILE_END6
label IF_FALSE6
push constant 0
return
function Block.beBounced 0
push argument 0
pop pointer 0
push this 5
return
function Block.getBlockNum 0
push argument 0
pop pointer 0
push argument 1
pop this 4
push constant 0
return
function Block.destroyed 0
push argument 0
pop pointer 0
push this 6
return
function Block.disappear 0
push argument 0
pop pointer 0
push constant 0
not
pop this 6
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push this 2
push this 1
push this 3
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Block.bounceBlock 5
push argument 0
pop pointer 0
push this 5
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
pop local 0
push this 2
push argument 2
sub
push constant 1
add
call Math.abs 1
pop local 4
push this 3
push argument 2
sub
push constant 1
add
call Math.abs 1
pop local 3
push this 0
push argument 1
sub
push constant 1
add
call Math.abs 1
pop local 1
push this 1
push argument 1
sub
push constant 1
add
call Math.abs 1
pop local 2
push local 1
push argument 3
lt
push local 2
push argument 3
lt
or
push argument 2
push this 2
gt
and
push argument 2
push this 3
lt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push constant 2
call Math.multiply 2
pop local 0
push constant 0
not
pop this 5
label IF_FALSE1
push local 4
push argument 3
lt
push local 3
push argument 3
lt
or
push argument 1
push this 0
gt
and
push argument 1
push this 1
lt
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push constant 3
call Math.multiply 2
pop local 0
push constant 0
not
pop this 5
label IF_FALSE2
push local 0
return
goto IF_END0
label IF_FALSE0
push constant 1
return
label IF_END0
function Block.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Block.ball2Block 4
push argument 0
pop pointer 0
push argument 1
push this 0
sub
push argument 1
push this 0
sub
call Math.multiply 2
call Math.abs 1
pop local 0
push argument 1
push this 1
sub
push argument 1
push this 1
sub
call Math.multiply 2
call Math.abs 1
pop local 1
push argument 2
push this 2
sub
push argument 2
push this 2
sub
call Math.multiply 2
call Math.abs 1
pop local 2
push argument 2
push this 3
sub
push argument 2
push this 3
sub
call Math.multiply 2
call Math.abs 1
pop local 3
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push this 0
lt
push argument 2
push this 2
lt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 2
add
push argument 3
push argument 3
call Math.multiply 2
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
push argument 2
push constant 3
call Screen.drawCircle 3
pop temp 0
push constant 0
not
return
goto IF_END1
label IF_FALSE1
push constant 0
return
label IF_END1
label IF_FALSE0
push argument 1
push this 0
lt
push argument 2
push this 3
gt
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push local 3
add
push argument 3
push argument 3
call Math.multiply 2
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 1
push argument 2
push constant 3
call Screen.drawCircle 3
pop temp 0
push constant 0
not
return
goto IF_END3
label IF_FALSE3
push constant 0
return
label IF_END3
label IF_FALSE2
push argument 1
push this 1
gt
push argument 2
push this 2
lt
and
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 1
push local 2
add
push argument 3
push argument 3
call Math.multiply 2
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push argument 1
push argument 2
push constant 3
call Screen.drawCircle 3
pop temp 0
push constant 0
not
return
goto IF_END5
label IF_FALSE5
push constant 0
return
label IF_END5
label IF_FALSE4
push argument 1
push this 1
gt
push argument 2
push this 3
gt
and
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 1
push local 3
add
push argument 3
push argument 3
call Math.multiply 2
lt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push argument 1
push argument 2
push constant 3
call Screen.drawCircle 3
pop temp 0
push constant 0
not
return
goto IF_END7
label IF_FALSE7
push constant 0
return
label IF_END7
goto IF_END6
label IF_FALSE6
push constant 0
return
label IF_END6
